// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/seibert-media/k8s-ingress/pkg/domain"
	"k8s.io/api/extensions/v1beta1"
)

type IngressConverter struct {
	ConvertStub        func([]domain.Domain) (*v1beta1.Ingress, error)
	convertMutex       sync.RWMutex
	convertArgsForCall []struct {
		arg1 []domain.Domain
	}
	convertReturns struct {
		result1 *v1beta1.Ingress
		result2 error
	}
	convertReturnsOnCall map[int]struct {
		result1 *v1beta1.Ingress
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IngressConverter) Convert(arg1 []domain.Domain) (*v1beta1.Ingress, error) {
	var arg1Copy []domain.Domain
	if arg1 != nil {
		arg1Copy = make([]domain.Domain, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.convertMutex.Lock()
	ret, specificReturn := fake.convertReturnsOnCall[len(fake.convertArgsForCall)]
	fake.convertArgsForCall = append(fake.convertArgsForCall, struct {
		arg1 []domain.Domain
	}{arg1Copy})
	fake.recordInvocation("Convert", []interface{}{arg1Copy})
	fake.convertMutex.Unlock()
	if fake.ConvertStub != nil {
		return fake.ConvertStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.convertReturns.result1, fake.convertReturns.result2
}

func (fake *IngressConverter) ConvertCallCount() int {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return len(fake.convertArgsForCall)
}

func (fake *IngressConverter) ConvertArgsForCall(i int) []domain.Domain {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return fake.convertArgsForCall[i].arg1
}

func (fake *IngressConverter) ConvertReturns(result1 *v1beta1.Ingress, result2 error) {
	fake.ConvertStub = nil
	fake.convertReturns = struct {
		result1 *v1beta1.Ingress
		result2 error
	}{result1, result2}
}

func (fake *IngressConverter) ConvertReturnsOnCall(i int, result1 *v1beta1.Ingress, result2 error) {
	fake.ConvertStub = nil
	if fake.convertReturnsOnCall == nil {
		fake.convertReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.Ingress
			result2 error
		})
	}
	fake.convertReturnsOnCall[i] = struct {
		result1 *v1beta1.Ingress
		result2 error
	}{result1, result2}
}

func (fake *IngressConverter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IngressConverter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
